import Head from 'next/head';
import Link from 'next/link';
import Image from 'next/image';
import Masonry from 'react-masonry-css';
import { Tab } from '@headlessui/react';
import * as  nodeFetch from 'node-fetch'
import type { LightGallery } from 'lightgallery/lightgallery';
import LightGalleryComponent from 'lightgallery/react';
import lgThumbnail from 'lightgallery/plugins/thumbnail';
import lgZoom from 'lightgallery/plugins/zoom';
import 'lightgallery/css/lightgallery.css';
import 'lightgallery/css/lg-zoom.css';
import 'lightgallery/css/lg-thumbnail.css';
import photographyBg from '../public/photography-bg.jpg'
import { useRef } from 'react';
import { GetStaticProps } from 'next';
import { HomeProps, Photo } from '@/types';
import { createApi } from 'unsplash-js';
import { getImages } from '@/utils/image-util';

type CreateApi = ReturnType<typeof createApi>
// type SerachPhotos = CreateApi['search']
// type GetPhotos = SerachPhotos['getPhotos']
// type Photoresponse = Awaited<ReturnType<GetPhotos>>


const tabs = [
  {key: 'all', display: 'ALL'},
  {key: 'oceans', display: 'OCEANS'},
  {key: 'forests', display: 'FORESTS'},
]

export const getStaticProps: GetStaticProps<HomeProps> = async () => {
  const unsplash = createApi({
    accessKey: process.env.UNPLASH_ACCESS_KEY!,
    fetch: nodeFetch.default as unknown as typeof fetch
  })
 
  const oceans = await getImages(unsplash, 'oceans')
  const forests = await getImages(unsplash, 'forests')
  
  return {
    props: {
      oceans,
      forests
    },
  }
}

export default function Home({oceans, forests}: HomeProps) {
  
  return (
    <div className='h-full overflow-auto'>
      <Head>
        <title>Photographer</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <Image placeholder='blur' src={photographyBg} alt="" className='fixed opacity-90 left-0 top-0 z-0 from-stone-900 bg-gradient-to-t' />
      <div className="fixed left-0 top-0 w-full h-full z-10"></div>
      <header className="flex bg-stone-900  w-full z-30 top-0 fixed justify-between items-center h-[90px] px-10">
        <span className="font-black text-3xl">PHOTO!</span>
        <Link href={'/'} className="rounded-full hover:bg-opacity-90 hover:font-semibold transition-all duration-100 bg-white font-medium text-stone-700 px-3 py-2 text-sm">Get in touch</Link>
      </header>
      <main className='pt-[110px] relative z-20'>
     <div className="flex items-center flex-col h-full">
     <Tab.Group>
      <Tab.List className='flex text-sm font-light items-center gap-16'>
        {tabs.map((tab) => (
          <Tab className='px-4 py-0.5' key={tab.key}>{({selected}) => (<span className={selected ? 'text-stone-300' : 'text-stone-400'}>{tab.display}</span>)}</Tab>
        ))}
      </Tab.List>
      <Tab.Panels className='h-full bg-stone-900 bg-opacity-40 max-w-[900px] w-full p-2 sm:p-4 my-6'>
        <Tab.Panel>
          <Gallery photos={[...oceans, ...forests]} />
        </Tab.Panel>
        <Tab.Panel>
        <Gallery photos={oceans} />
        </Tab.Panel>
        <Tab.Panel>
          <Gallery photos={forests} />
        </Tab.Panel>
      </Tab.Panels>
    </Tab.Group>
     </div>
      </main>
      <footer className='h-[90px] flex justify-center items-center z-20 relative'>
        <p className='uppercase text-sm text-stone-500 font-black'>Photography Portfolio &copy; 2023</p>
      </footer>
    </div>
  );
}

interface GalleryProps {
  photos: Photo[]
}

const Gallery = ({photos}: GalleryProps) => {
  const lightboxRef = useRef<LightGallery | null>(null)
  return (
   <>
    <Masonry
          breakpointCols={2}
          className="flex gap-4"
          columnClassName="my-masonry-grid_column">
            {photos.map((photo, idx) => (
              <Image
              blurDataURL={photo.blurDataURL}
              width={photo.width}
              height={photo.height}
               onClick={() => {
                lightboxRef.current?.openGallery(idx)
              }} key={photo.src}  src={photo.src} alt={photo.alt} className='my-4 hover:opacity-70 hover:cursor-pointer' />
            ))}
        </Masonry>
        <LightGalleryComponent onInit={(ref) => {
          if(ref) {
            lightboxRef.current = ref.instance
          }
        }} 
        dynamicEl={photos.map(photo => ({
          key: photo.src,
          src: photo.src,
          thumb: photo.src
        }))} 
        dynamic speed={500} plugins={[lgThumbnail, lgZoom]} /> 
   </>
  )
}


// const getImages = async (cli: ReturnType<typeof createApi>, query: string): Promise<Photo[]> => {
//   const mappedPhotos: Photo[] = []
//   const photos =  await cli.search.getPhotos({
//     query
//   })
//   if(photos.type === 'success') {
//     const photosArr = photos.response.results.map((photo, idx )=> ({
//       src: photo.urls.full,
//       thumb: photo.urls.thumb,
//       width: photo.width,
//       height: photo.height,
//       alt: photo.alt_description ?? `photo image-${idx}`,
//     }))
//     mappedPhotos.push(...photosArr)
//   } else {
//     console.error('Could not getphotos')
//   }
//   return mappedPhotos
// }